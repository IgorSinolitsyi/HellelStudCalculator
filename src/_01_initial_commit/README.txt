1) Запускаем IntelliJ IDEA и создаем проект 
GitHub-Calculator-IDE без шаблона 
(уберем галочку Add sample code)


2) В проекте создаем пакет app, где создаем
класс Main с простым функционалом.


3) Проверяем внешний путь Git (если нет, укажите)

     File>Settings>Version Control>Git

Для проверки, жмем кнопку Test. Должно появиться
сообщение о Git.


4) Подключим интеграцию контроля версий.

Верхнее меню
     VCS>Enable Version Control Integration...

В модальном окне, оставляем Git, жмем кнопку "ОК".

В проекте активируется Git, с веткой по умолчанию.
Появится соответствующее уведомление.
Цвета файлов в проекте изменились.
Верхнее и нижнее меню, инструментальная панель претерпели изменения: 
появились иконки для работы с Git, название текущей ветки и т.п.

В файловой системе, в папке проекта появится папка .git .
ВНИМАНИЕ. Папка .git – скрыта, поэтому необходимо, предварительно, 
активировать функцию показа скрытых папок и файлов.


5) Проверим где находимся. Жмем master внизу-справа. Указано, находимся 
в локальной ветке master .


6) Посмотрим неотслеживаемые файлы

Верхнее меню
     View>Tool Windows>Git
или нижнее меню
     Git

Неотслеживаемые файлы во вкладке Local Changes, 
в Unversioned files.

ВНИМАНИЕ. Если вкладки Local Changes нет.
Изменить настройки через флажек в окне настроек 
File>Settings>Version Control>Commit
убрать флажек перед Use non-modal commit interface


7) Настроим игнорирование файлов.

Все файлы для Git не нужны (файлы конфигурации, настроек и т.п.).
Необходимы настройки по игнорированию файлов, которые хотим исключить.

Создадим файл .gitignore в корне проекта. 

Верхнее меню
     File>New>File

В модальном окне вводим  .gitignore , жмем Enter.

В модальном окне отказываемся от добавления файла под версионный 
контроль, нажимая Cancel .

Файл  .gitignore  создан, но он пока пуст.

Добавим в файл

.gitignore
.idea/
*.iml
out/


8) Посмотрим неотслеживаемые файлы

Верхнее меню
     View>Tool Windows>Git
или нижнее меню
     Git

Неотслеживаемые файлы во вкладке Local Changes.
Осталось необходимое.


9) Добавим файл   Main.java   в индексированное
В панели проекта 
     Правый клик на файле>Git>Add

После добавления, файл изменит цвет.


10) Произведем фиксацию (commit)  Main.java

В панели проекта 
     Правый клик на файле>Git>Commit File...

Появится интерфейс коммитов в виде модального окна 
или в виде боковой панели. 

ВНИМАНИЕ. Разница зависит от версии IDE и ее настроек.
Изменить настройки можно через флажек в окне настроек 
File>Settings>Version Control>Commit
поставить/убрать флажек перед Use non-modal commit interface

В интерфейсе коммитов, введем сообщение фиксации.
Если это первоначальный коммит в проекте, обычно сообщение о фиксации

Initial commit

Также, если не хотите выполнять анализ кода и проверять TODO, 
снимите их флажки (стоят по умолчанию). Кликаем Commit.

ВНИМАНИЕ. Если не настроены данные пользователя, то может всплыть 
окно Git User Name Is Not Defined.

     Name и Email установим, которые будем использовать на GitHub.

     Можем снять флажек с Set properties globally, если хотим 
     использовать данные только для этого проекта, а не глобально, 
     для всех проектов.

     Кликаем Set and Commit.

В проекте произошли изменения. Цвет файла(ов) под фиксацией изменится 
на цвет по умолчанию.


11) Проверим файлы
Нижнее меню
     Git>Local Changes - пусто
     Git>Log - наш коммит



